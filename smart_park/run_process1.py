# -*- coding: utf-8 -*-
"""PLV_MODULE1_PIPELEINE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vHs5S8M8Siu6Vdqa2T74fzWEpjaL8ZN7
"""

"""YOUTUBE STREAM IMAGE FETCHER"""

import cv2
import urllib
import pafy
import time
import os
import subprocess
import string
import random
import boto3
import pathlib
import json
import argparse
import platform
import shutil
import time
import torch
import torch.backends.cudnn as cudnn
import configparser
import my_utils
from my_utils.image_fetcher import image_fetcher
from my_utils.preprocess3 import pre_process
from numpy import random
from pathlib import Path
from datetime import datetime
from pymongo import MongoClient, errors
from subprocess import PIPE, run
import botocore




def process2_pipeline(MODEL, MONGO, AWS_CREDENTIALS, AWS_ENV,PREPROCESSING_CONFIG, object_name):
    # IMAGE FETCHER SCRIPT
    url = "https://www.youtube.com/watch?v=e9LYewJGQlk"

    fetched_image, filename_string, str_date = image_fetcher(url)

    # Setting the path for saving the fetched and preprocessed images.
    preprocess_image_dir_path = PREPROCESSING_CONFIG["preprocessed-image-dir-save-path"]
    
    # Sending the image to preprocessing script 
    pre_processed_image = pre_process(fetched_image, preprocess_image_dir_path, filename_string) 
  
    # Setting the directory path to fetch the image for detection 
    source = PREPROCESSING_CONFIG["preprocessed-image-dir-save-path"] + filename_string


    # PREDICTION part of the process pipeline
    command = [
            'python3',
            '/home/ubuntu/urban-detection/yolov5/detect.py',  
            '--weights',
            MODEL["weights"],
            '--source',
            source,
            '--img-size',
            MODEL["img-size"],
            '--conf-thres',
            '0.68'
            ]
   
   # Running the detection script
    sp = subprocess.Popen(command, stdout=subprocess.PIPE)
    output, _ = sp.communicate()
    
   # POST-PROCESSING Script 
    print(output)
    result_string =  (output.split(b'\n'))[-5]
    print(result_string)
    try: 
       number_of_vehicles = int(result_string.split(b" ")[1])
       number_of_empty_parking_slots = 41 - number_of_vehicles
    except:
       number_of_vehicles = 0
       number_of_empty_parking_slots = 41

  
    # #S3 BUCKET  UPLOADING CODE

    
    object_name = object_name + filename_string
    file_name = os.path.join(pathlib.Path(__file__).parent.resolve(), f"/home/ubuntu/ms_final_project/inference/output/{filename_string}")
    response = s3.upload_file(file_name, bucket_name, object_name)
    print(response)
    safe="~()*!.'"
   #  config = botocore.client.Config(signature_version=botocore.UNSIGNED)    
   #  object_url = boto3.client('s3', config=config, aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY).generate_presigned_url('get_object', ExpiresIn=0, Params={'Bucket': bucket_name, 'Key': filename_string})
   #  object_url = f"https://{bucket_name}.s3.amazonaws.com/{urllib.parse.quote(str({filename_string}), safe=safe)}"
    location = boto3.client('s3', aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY).get_bucket_location(Bucket=bucket_name)['LocationConstraint'] 
    http_url = "https://s3-%s.amazonaws.com/%s/%s" % (location, bucket_name, object_name)  
    print(http_url)





    # LOCAL DOCKER MOGODB INSERT
    # This is the general structure of a s3 object URL - s3://detectionlog/prediction_images/2022-10-24T15:20:53.736000_keoiuy5.jpg
    s3_url = f's3://{bucket_name}/{object_name}'

    # inserting the s3 link into the local mongodb collection running inside a docker instance
    db_connection = client.plv_detection_data
    collection = db_connection.ResultsAndImagelinks

    # Building a response JSON Object
    record = {
        "parking_lot_name": parking_lot_name,
        "parking_lot_uuid": parking_lot_uuid,
        "number_of_vehicles": number_of_vehicles,
        "number_of_empty_parking_slots": number_of_empty_parking_slots,
        "image_s3_uri" : s3_url,
        "image_s3_http_url" : http_url,
        "timestamp": str_date
    }
    # Inserting it into the database.
    success = collection.insert_one(record)
    print("record inserted locally in monogdb")



    

if __name__ == "__main__":
#Read config.ini file
    config_obj = configparser.ConfigParser()
    config_obj.read("/home/ubuntu/mongodb/database/config.ini")
    MODEL = config_obj["MODEL_INPUTS"]
    MONGO = config_obj["MONGODB_ENV"]
    AWS_CREDENTIALS = config_obj["AWS_CREDS"]
    AWS_ENV = config_obj["AWS_ENV"]
    PREPROCESSING_CONFIG = config_obj["PRE_PROCESSING_BOUNDS"]
    ACCESS_KEY = AWS_CREDENTIALS["access_key"]
    SECRET_KEY = AWS_CREDENTIALS["secret_key"]

    DOMAIN = MONGO["domain"]
    PORT = MONGO["port"]
    database = MONGO["database"]


    parking_lot_name = MONGO["temp_parking_lot_name"]
    parking_lot_uuid = MONGO["temp_parking_lot_uuid"]

    bucket_name = AWS_ENV["s3_bucket_name"]
    object_name = AWS_ENV["s3_object_name"]

    # MONGODB CLIENT CONNECTION 
    client = MongoClient(
                host = [ str(DOMAIN) + ":" + str(PORT) ],
                serverSelectionTimeoutMS = 3000, # 3 second timeout
                username = "root",
                password = "12345",
                )
    s3 = boto3.client("s3",aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY)

    n = 0
    while True:
        print(f"iteration {n}")
        start = time.time()
        
        process2_pipeline(MODEL, MONGO, AWS_CREDENTIALS, AWS_ENV,PREPROCESSING_CONFIG, object_name)

        end = time.time()
        diff = end - start
        print(diff)
        time.sleep(3)
        n += 1 
       













